#!/usr/bin/env python3
"""
MeetVoice App Compl√®te - Tout-en-un
- TTS (Text-to-Speech)
- IA Chat (Gemini + DeepInfra)
- Description Attractive
- Questions d'inscription
- WebSocket temps r√©el
- Base de donn√©es PostgreSQL
"""

import asyncio
import json
import time
import base64
import hashlib
import os
import re
from typing import Dict, List, Optional, Literal
from pathlib import Path

from fastapi import FastAPI, HTTPException, WebSocket, WebSocketDisconnect, UploadFile, File
from fastapi.responses import FileResponse, JSONResponse, StreamingResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field, field_validator

import edge_tts
import requests
import google.generativeai as genai
from dotenv import load_dotenv
import speech_recognition as sr
import io
import tempfile
import wave
from database import get_database_service
import logging

# Configuration
load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# App principale
app = FastAPI(title="MeetVoice App Compl√®te", version="3.0")

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:8080",
        "http://localhost:8083",
        "http://localhost:8085",  # Frontend Vue.js
        "http://127.0.0.1:8080",
        "http://127.0.0.1:8083",
        "http://127.0.0.1:8085",  # Frontend Vue.js
        "https://aaaazealmmmma.duckdns.org",
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["Accept", "Accept-Language", "Content-Language", "Content-Type", "Authorization"],
    expose_headers=["Content-Length", "Content-Type"],
)

# Service de base de donn√©es
db_service = get_database_service()

# Configuration APIs externes
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
DEEPINFRA_API_KEY = os.getenv('DEEPINFRA_API_KEY')

if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)

# ================================
# MOD√àLES DE DONN√âES
# ================================

class TTSRequest(BaseModel):
    text: str
    voice: str = "Microsoft Server Speech Text to Speech Voice (fr-FR, DeniseNeural)"
    rate: str = "+0%"
    pitch: str = "+0Hz"

class IARequest(BaseModel):
    prompt: str = Field(..., description="Question/prompt pour l'IA")
    system_prompt: str = Field(default="Tu es Sophie, coach de s√©duction experte et bienveillante.", description="Prompt syst√®me")
    include_audio: bool = Field(default=True, description="Inclure la r√©ponse audio")
    user_id: Optional[str] = Field(default="anonymous", description="ID utilisateur")
    prenom: Optional[str] = Field(default=None, description="Pr√©nom de l'utilisateur pour personnaliser")
    voice: str = Field(default="Microsoft Server Speech Text to Speech Voice (fr-FR, DeniseNeural)", description="Voix TTS")
    rate: str = Field(default="+0%", description="Vitesse de la voix")
    pitch: str = Field(default="+0Hz", description="Hauteur de la voix")

class DescriptionRequest(BaseModel):
    prenom: str = Field(..., description="Pr√©nom de la personne")
    physique: str = Field(..., description="Description physique")
    gouts: str = Field(..., description="Go√ªts et centres d'int√©r√™t")
    recherche: str = Field(..., description="Type de relation recherch√©e")
    user_id: str = Field(default="anonymous", description="ID utilisateur")
    style_description: str = Field(default="authentique", description="Style de description")
    # longueur supprim√©e - TOUJOURS version premium longue (service payant)

    @field_validator('recherche')
    @classmethod
    def validate_recherche(cls, v):
        v_lower = v.lower()
        if v_lower not in ["amical", "amoureuse", "libertin"]:
            raise ValueError("recherche doit √™tre 'amical', 'amoureuse' ou 'libertin'")
        return v_lower

    @field_validator('style_description')
    @classmethod
    def validate_style(cls, v):
        v_lower = v.lower()
        if v_lower not in ["elegant", "decontracte", "seducteur", "authentique"]:
            raise ValueError("style_description doit √™tre 'elegant', 'decontracte', 'seducteur' ou 'authentique'")
        return v_lower

    # Validateur longueur supprim√© - toujours version premium

class FeedbackRequest(BaseModel):
    conversation_id: int
    rating: int  # 1-5
    comment: str = ""
    category: str = "general"
    improvement_suggestion: str = ""
    user_id: str = None

# ================================
# GESTIONNAIRE WEBSOCKET
# ================================

class ConnectionManager:
    def __init__(self):
        self.active_connections: Dict[str, WebSocket] = {}
    
    async def connect(self, websocket: WebSocket, user_id: str):
        await websocket.accept()
        self.active_connections[user_id] = websocket
        logger.info(f"üîó WebSocket connect√©: {user_id}")
    
    def disconnect(self, user_id: str):
        if user_id in self.active_connections:
            del self.active_connections[user_id]
        logger.info(f"‚ùå WebSocket d√©connect√©: {user_id}")
    
    async def send_message(self, user_id: str, message: dict):
        if user_id in self.active_connections:
            try:
                await self.active_connections[user_id].send_text(json.dumps(message))
                return True
            except Exception as e:
                logger.error(f"Erreur envoi WebSocket: {e}")
                self.disconnect(user_id)
                return False
        return False

manager = ConnectionManager()

# ================================
# FONCTIONS TTS
# ================================

async def generer_audio_tts(texte: str, voice: str = "Microsoft Server Speech Text to Speech Voice (fr-FR, DeniseNeural)", rate: str = "+0%", pitch: str = "+0Hz") -> bytes:
    """G√©n√®re l'audio TTS avec Edge TTS"""
    try:
        # Nettoyer le texte
        texte_clean = re.sub(r'[^\w\s\.,!?;:-]', '', texte)
        
        # G√©n√©rer l'audio
        communicate = edge_tts.Communicate(texte_clean, voice, rate=rate, pitch=pitch)
        audio_data = b""
        
        async for chunk in communicate.stream():
            if chunk["type"] == "audio":
                audio_data += chunk["data"]
        
        return audio_data
        
    except Exception as e:
        logger.error(f"Erreur TTS: {e}")
        return b""

async def generer_audio_tts_streaming(texte: str, voice: str = "Microsoft Server Speech Text to Speech Voice (fr-FR, DeniseNeural)", rate: str = "+0%", pitch: str = "+0Hz"):
    """G√©n√®re l'audio TTS en streaming"""
    try:
        # Nettoyer le texte
        texte_clean = re.sub(r'[^\w\s\.,!?;:-]', '', texte)

        # G√©n√©rer l'audio en streaming
        communicate = edge_tts.Communicate(texte_clean, voice, rate=rate, pitch=pitch)

        async for chunk in communicate.stream():
            if chunk["type"] == "audio":
                yield chunk["data"]

    except Exception as e:
        logger.error(f"Erreur TTS streaming: {e}")
        yield b""

async def transcrire_audio(audio_file: UploadFile) -> str:
    """Transcrit un fichier audio en texte"""
    try:
        # Lire le contenu du fichier audio
        audio_content = await audio_file.read()

        # Cr√©er un fichier temporaire
        with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as temp_file:
            temp_file.write(audio_content)
            temp_file_path = temp_file.name

        # Utiliser speech_recognition pour transcrire
        recognizer = sr.Recognizer()

        with sr.AudioFile(temp_file_path) as source:
            audio_data = recognizer.record(source)

        # Transcription avec Google Speech Recognition (gratuit)
        try:
            text = recognizer.recognize_google(audio_data, language='fr-FR')
            logger.info(f"üé§ Transcription: {text[:50]}...")
            return text
        except sr.UnknownValueError:
            return "Je n'ai pas pu comprendre l'audio"
        except sr.RequestError as e:
            logger.error(f"Erreur service transcription: {e}")
            return "Erreur de transcription"

    except Exception as e:
        logger.error(f"Erreur transcription audio: {e}")
        raise Exception(f"Erreur transcription: {str(e)}")
    finally:
        # Nettoyer le fichier temporaire
        try:
            os.unlink(temp_file_path)
        except:
            pass

# ================================
# FONCTIONS IA
# ================================

def repondre_questions_simples(prompt: str, prenom: str = None) -> str:
    """R√©pond aux questions simples personnalis√©es avec le pr√©nom"""
    import datetime

    prompt_lower = prompt.lower()
    now = datetime.datetime.now()

    # Personnalisation avec le pr√©nom
    nom = f" {prenom}" if prenom else ""

    # Salutations (priorit√© haute pour √©viter confusion avec date)
    if any(word in prompt_lower for word in ["salut", "bonjour", "bonsoir", "hello", "hi", "coucou"]):
        if now.hour < 12:
            return f"Bonjour{nom} ! Ravie de te rencontrer ! Comment puis-je t'aider dans tes rencontres ?"
        elif now.hour < 18:
            return f"Salut{nom} ! Enchant√©e ! Pr√™t(e) √† parler s√©duction ?"
        else:
            return f"Bonsoir{nom} ! Parfait timing pour une conversation coquine... Que puis-je faire pour toi ? üòâ"

    # Questions sur l'heure
    elif any(word in prompt_lower for word in ["heure", "temps", "time", "quelle heure"]):
        heure = now.strftime("%H:%M")
        if now.hour >= 20 or now.hour <= 6:
            return f"Il est {heure}{nom}. Parfait pour une conversation intime ! üòâ"
        else:
            return f"Il est {heure}{nom}. Une bonne heure pour faire connaissance !"

    # Questions sur la date/jour
    elif any(word in prompt_lower for word in ["jour", "date", "aujourd'hui", "quel jour", "nous sommes"]):
        jour = now.strftime("%A %d %B %Y")
        jour_fr = {
            "Monday": "lundi", "Tuesday": "mardi", "Wednesday": "mercredi",
            "Thursday": "jeudi", "Friday": "vendredi", "Saturday": "samedi", "Sunday": "dimanche",
            "January": "janvier", "February": "f√©vrier", "March": "mars", "April": "avril",
            "May": "mai", "June": "juin", "July": "juillet", "August": "ao√ªt",
            "September": "septembre", "October": "octobre", "November": "novembre", "December": "d√©cembre"
        }
        for en, fr in jour_fr.items():
            jour = jour.replace(en, fr)

        if "vendredi" in jour or "samedi" in jour:
            return f"Nous sommes {jour}{nom}. Parfait pour planifier un rendez-vous ! üíï"
        else:
            return f"Nous sommes {jour}{nom}. Une belle journ√©e pour faire de nouvelles rencontres !"

    # Questions m√©t√©o
    elif any(word in prompt_lower for word in ["m√©t√©o", "temps", "pluie", "soleil", "weather"]):
        return f"Peu importe le temps qu'il fait{nom}, l'important c'est la chimie entre nous ! Parlons plut√¥t de toi üòä"

    # Questions sur l'√¢ge
    elif any(word in prompt_lower for word in ["√¢ge", "age", "ans", "vieux", "vieille", "quel √¢ge"]):
        return f"Une femme ne r√©v√®le jamais son √¢ge{nom} ! Mais j'ai l'exp√©rience qu'il faut pour t'aider √† s√©duire üòâ"

    # Questions sur la localisation
    elif any(word in prompt_lower for word in ["o√π", "habite", "vis", "location", "ville"]):
        return f"Je suis partout o√π il y a des c≈ìurs √† conqu√©rir{nom} ! L'important c'est qu'on puisse discuter de tes rencontres."

    return None  # Pas une question simple

def appeler_gemini(prompt: str, system_prompt: str, prenom: str = None) -> str:
    """Appelle l'API Gemini avec gestion des questions simples personnalis√©es"""
    try:
        # D'abord v√©rifier si c'est une question simple
        reponse_simple = repondre_questions_simples(prompt, prenom)
        if reponse_simple:
            return reponse_simple

        # Sinon, utiliser Gemini avec un prompt enrichi
        model = genai.GenerativeModel('gemini-1.5-flash')

        # System prompt adapt√© au contexte site de rencontre avec personnalisation
        prenom_info = f"\n\nL'utilisateur s'appelle {prenom}. Utilise son pr√©nom de temps en temps pour personnaliser tes r√©ponses." if prenom else ""

        system_enrichi = f"""{system_prompt}

CONTEXTE: Nous sommes sur un site de rencontre. L'utilisateur cherche des conseils pour s√©duire, draguer, ou am√©liorer ses relations amoureuses/amicales/libertines.

R√©ponds de mani√®re naturelle et directe, avec une pointe de complicit√©. Ram√®ne toujours la conversation vers la s√©duction, les rencontres, ou les relations.{prenom_info}"""

        full_prompt = f"{system_enrichi}\n\nUtilisateur: {prompt}"

        response = model.generate_content(full_prompt)
        return response.text

    except Exception as e:
        logger.error(f"Erreur Gemini: {e}")
        raise Exception(f"Erreur Gemini: {str(e)}")

def appeler_deepinfra(prompt: str, system_prompt: str) -> str:
    """Appelle l'API DeepInfra"""
    try:
        url = "https://api.deepinfra.com/v1/openai/chat/completions"
        
        headers = {
            "Authorization": f"Bearer {DEEPINFRA_API_KEY}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": "meta-llama/Meta-Llama-3.1-70B-Instruct",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ],
            "max_tokens": 1000,
            "temperature": 0.7
        }
        
        response = requests.post(url, headers=headers, json=data, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            return result["choices"][0]["message"]["content"]
        else:
            raise Exception(f"Erreur DeepInfra: {response.status_code}")
            
    except Exception as e:
        logger.error(f"Erreur DeepInfra: {e}")
        raise Exception(f"Erreur DeepInfra: {str(e)}")

async def call_ai_hybrid(prompt: str, system_prompt: str, prenom: str = None) -> dict:
    """Appelle l'IA avec fallback automatique et personnalisation"""
    start_time = time.time()

    try:
        # Essayer Gemini d'abord avec personnalisation
        response = appeler_gemini(prompt, system_prompt, prenom)
        processing_time = time.time() - start_time
        
        return {
            "response": response,
            "provider": "gemini",
            "fallback_used": False,
            "cost": 0.0,  # Gemini gratuit
            "processing_time": processing_time
        }
        
    except Exception as gemini_error:
        logger.warning(f"Gemini √©chou√©, fallback vers DeepInfra: {gemini_error}")
        
        try:
            # Fallback vers DeepInfra
            response = appeler_deepinfra(prompt, system_prompt)
            processing_time = time.time() - start_time
            
            return {
                "response": response,
                "provider": "deepinfra",
                "fallback_used": True,
                "cost": 0.003,
                "processing_time": processing_time
            }
            
        except Exception as deepinfra_error:
            logger.error(f"Tous les providers IA ont √©chou√©: {deepinfra_error}")
            raise HTTPException(status_code=503, detail="Service IA temporairement indisponible")

# ================================
# FONCTIONS DESCRIPTION ATTRACTIVE
# ================================

def generer_description_attractive(personne: DescriptionRequest) -> dict:
    """G√©n√®re une description attractive pour profil de rencontre"""
    
    # Templates par type de recherche - Version am√©lior√©e
    templates = {
        "amical": {
            "intro": "Salut ! Moi c'est {prenom}, {physique_reformule}.",
            "corps": "Dans la vie, {gouts_reformules}. J'aime les gens authentiques et les moments de partage.",
            "motivation": "Je suis ici parce que je crois qu'on n'a jamais assez d'amis sinc√®res dans la vie. Apr√®s avoir d√©m√©nag√© r√©cemment, ou simplement par envie d'√©largir mon cercle social, je cherche des personnes avec qui cr√©er de vraies connexions amicales.",
            "conclusion": "Si tu cherches une amiti√© sinc√®re, des sorties sympas et des conversations enrichissantes, on devrait faire connaissance !",
            "extension": "Ce qui me caract√©rise ? J'ai cette capacit√© √† voir le positif dans chaque situation et √† transformer les moments ordinaires en souvenirs m√©morables. Mes amis disent de moi que je suis quelqu'un sur qui on peut compter, toujours pr√™t √† aider ou √† partager un fou rire.\n\nJ'adore d√©couvrir de nouveaux endroits, que ce soit un petit restaurant cach√© dans une ruelle ou un sentier de randonn√©e perdu en montagne. La spontan√©it√© fait partie de ma personnalit√© - je peux aussi bien proposer une soir√©e cin√©ma improvis√©e qu'un week-end √† l'aventure.\n\nJe crois fermement que les meilleures amiti√©s naissent des moments simples : un caf√© qui se prolonge, une conversation qui nous fait oublier l'heure, ou ces instants o√π on rit tellement qu'on en a mal au ventre. Si tu es du genre √† appr√©cier l'authenticit√©, les discussions profondes autant que les d√©lires, et que tu cherches quelqu'un avec qui cr√©er de vrais liens d'amiti√©, alors on a s√ªrement plein de choses √† partager !"
        },
        "amoureuse": {
            "intro": "Je suis {prenom}, {physique_reformule}, et je crois encore aux belles rencontres.",
            "corps": "Dans la vie, {gouts_reformules}. J'aime profiter des petits plaisirs et partager mes passions.",
            "motivation": "Je suis ici parce que je suis pr√™t(e) √† rencontrer quelqu'un de sp√©cial. Apr√®s avoir pris le temps de me conna√Ætre et de savoir ce que je veux vraiment, je me sens pr√™t(e) √† construire une relation authentique et durable avec la bonne personne.",
            "conclusion": "Je recherche quelqu'un avec qui construire une belle histoire d'amour et partager les joies de la vie √† deux.",
            "extension": "Je suis de ceux qui pensent que l'amour, le vrai, se construit jour apr√®s jour dans les petites attentions et les grands projets partag√©s. J'aime ces matins o√π on se r√©veille avec l'envie de d√©couvrir le monde √† deux, ces soir√©es o√π on se raconte nos r√™ves en regardant les √©toiles, et ces moments de complicit√© o√π un simple regard suffit √† se comprendre. Dans une relation, je valorise la communication, l'humour et cette capacit√© √† grandir ensemble tout en gardant sa propre personnalit√©. J'ai cette vision romantique de l'amour o√π chaque jour peut √™tre une nouvelle aventure, o√π on se soutient dans les d√©fis et o√π on c√©l√®bre ensemble les victoires, m√™me les plus petites. Je r√™ve de ces week-ends o√π on se perd dans une nouvelle ville, de ces soir√©es cuisine o√π on invente des recettes improbables, et de ces projets fous qu'on r√©alise √† deux. Si tu cherches quelqu'un avec qui √©crire une belle histoire, quelqu'un qui croit encore aux papillons dans le ventre et aux projets d'avenir partag√©s, alors peut-√™tre qu'on est faits pour se rencontrer."
        },
        "libertin": {
            "intro": "Salut, moi c'est {prenom}, {physique_reformule}, et j'assume pleinement qui je suis.",
            "corps": "Dans la vie, {gouts_reformules}. J'aime les plaisirs de la vie et les exp√©riences enrichissantes.",
            "motivation": "Je suis ici parce que je vis ma sexualit√© de mani√®re √©panouie et d√©complex√©e. Je cherche des personnes qui, comme moi, assument leurs d√©sirs et souhaitent explorer de nouvelles exp√©riences dans un cadre de respect mutuel et de bienveillance.",
            "conclusion": "Si tu cherches quelqu'un avec qui passer de bons moments intenses et d√©couvrir de nouveaux plaisirs, contacte-moi !",
            "extension": "Je suis quelqu'un qui vit sa sexualit√© de mani√®re √©panouie et d√©complex√©e, toujours dans le respect et la bienveillance. Pour moi, la s√©duction est un art qui se cultive, fait de regards complices, de conversations stimulantes et de cette chimie particuli√®re qui na√Æt entre deux personnes qui se comprennent. J'appr√©cie les rencontres authentiques o√π on peut √™tre soi-m√™me sans jugement, o√π la complicit√© se construit naturellement et o√π chacun peut exprimer ses d√©sirs en toute libert√©. Je privil√©gie la qualit√© √† la quantit√©, pr√©f√©rant des connexions vraies et intenses aux relations superficielles. L'intelligence et l'humour sont pour moi des aphrodisiaques puissants - j'adore ces conversations qui commencent autour d'un verre et qui nous m√®nent vers des territoires inexplor√©s. Je crois en l'importance du consentement, de la communication et de cette capacit√© √† cr√©er ensemble des moments uniques et m√©morables. Si tu es une personne ouverte, curieuse, qui assume ses d√©sirs et cherche des exp√©riences enrichissantes dans un cadre de respect mutuel, alors nous avons probablement des affinit√©s √† explorer."
        }
    }
    
    # Reformulations intelligentes
    def reformuler_physique(physique: str) -> str:
        """Transforme une description technique en description attractive"""
        physique_lower = physique.lower()

        # Extraire les informations cl√©s
        taille = ""
        if "180cm" in physique or "1m80" in physique:
            taille = "grand"
        elif "170cm" in physique or "1m70" in physique:
            taille = "de taille moyenne"
        elif "taille" in physique_lower:
            taille = "bien proportionn√©"

        yeux = ""
        if "noisette" in physique_lower:
            yeux = "au regard noisette"
        elif "bleu" in physique_lower:
            yeux = "aux yeux bleus"
        elif "vert" in physique_lower:
            yeux = "aux yeux verts"
        elif "marron" in physique_lower:
            yeux = "au regard brun"

        cheveux = ""
        if "ras√©" in physique_lower or "chauve" in physique_lower:
            cheveux = "au style assum√©"
        elif "noir" in physique_lower:
            cheveux = "aux cheveux noirs"
        elif "brun" in physique_lower:
            cheveux = "aux cheveux bruns"
        elif "blond" in physique_lower:
            cheveux = "aux cheveux blonds"

        style = ""
        if "sportif" in physique_lower or "sport" in physique_lower:
            style = "sportif"
        elif "√©l√©gant" in physique_lower:
            style = "√©l√©gant"
        else:
            style = "au charme naturel"

        # Construire une description fluide
        elements = [e for e in [taille, style, cheveux, yeux] if e]
        if elements:
            return ", ".join(elements[:3])  # Max 3 √©l√©ments pour √©viter la surcharge
        else:
            return "au charme naturel"
    
    def reformuler_gouts(gouts: str) -> str:
        """Transforme une liste de go√ªts en description narrative attractive"""
        gouts_lower = gouts.lower()

        # Extraire les activit√©s par cat√©gorie
        sports = []
        if "sport en salle" in gouts_lower or "musculation" in gouts_lower:
            sports.append("la musculation")
        if "course" in gouts_lower or "running" in gouts_lower:
            sports.append("la course √† pied")
        if "aviron" in gouts_lower:
            sports.append("l'aviron")
        if "√©checs" in gouts_lower:
            sports.append("les √©checs")

        loisirs = []
        if "cin√©ma" in gouts_lower or "films" in gouts_lower:
            loisirs.append("le cin√©ma")
        if "restaurant" in gouts_lower:
            loisirs.append("la gastronomie")
        if "musique" in gouts_lower:
            loisirs.append("la musique")
        if "voyage" in gouts_lower:
            loisirs.append("les voyages")
        if "pilotage" in gouts_lower:
            loisirs.append("l'aviation")

        # Construire une phrase naturelle
        passions = []

        if sports:
            if len(sports) == 1:
                passions.append(f"je pratique {sports[0]}")
            else:
                passions.append(f"je suis passionn√© de sport ({', '.join(sports[:2])})")

        if loisirs:
            if len(loisirs) == 1:
                passions.append(f"j'adore {loisirs[0]}")
            elif len(loisirs) == 2:
                passions.append(f"j'appr√©cie {loisirs[0]} et {loisirs[1]}")
            else:
                passions.append(f"j'aime {', '.join(loisirs[:2])} entre autres")

        # Ajouter des traits de caract√®re s'ils sont mentionn√©s
        if "intelligent" in gouts_lower:
            passions.append("j'aime les d√©fis intellectuels")
        if "charismatique" in gouts_lower:
            passions.append("j'aime rencontrer de nouvelles personnes")

        if passions:
            return ". ".join(passions[:3])  # Max 3 phrases
        else:
            return "j'ai de nombreux centres d'int√©r√™t vari√©s"
    
    # Variables pour le template
    template = templates[personne.recherche]
    variables = {
        "prenom": personne.prenom,
        "physique_reformule": reformuler_physique(personne.physique),
        "gouts_reformules": reformuler_gouts(personne.gouts),
        "trait": "dynamique" if personne.recherche == "amical" else "authentique",
        "trait_sensuel": "une personne assum√©e",
        "activite": "d√©couvrir de nouvelles choses"
    }
    
    # TOUJOURS g√©n√©rer la version PREMIUM LONGUE (service payant)
    # Description compl√®te avec tous les √©l√©ments pour maximiser la valeur
    description = f"{template['intro'].format(**variables)}\n\n{template['corps'].format(**variables)}\n\n{template['motivation']}\n\n{template['extension']}\n\n{template['conclusion'].format(**variables)}"
    
    # Calculer le score d'attractivit√© PREMIUM
    score = 70  # Base plus √©lev√©e pour service premium
    if len(personne.physique) > 30: score += 15
    if len(personne.gouts) > 40: score += 15
    # Bonus pour version premium compl√®te
    score += 10  # Bonus motivation
    score += 10  # Bonus extension
    score += 5   # Bonus paragraphes structur√©s
    
    # Conseils
    conseils = []
    if len(personne.physique) < 20:
        conseils.append("Ajoutez plus de d√©tails sur votre apparence")
    if len(personne.gouts) < 30:
        conseils.append("D√©veloppez davantage vos centres d'int√©r√™t")
    if not conseils:
        conseils.append("Votre profil est bien √©quilibr√© !")
    
    # Mots-cl√©s attractifs
    mots_cles = []
    description_lower = description.lower()
    for mot in ["authentique", "passionn√©", "dynamique", "charme", "d√©couvrir"]:
        if mot in description_lower:
            mots_cles.append(mot)
    
    return {
        "description": description,
        "conseils_amelioration": conseils,
        "mots_cles_attractifs": mots_cles[:5],
        "score_attractivite": min(score, 100),
        "style_utilise": personne.style_description
    }

# ================================
# ENDPOINTS
# ================================

@app.get("/")
async def root():
    return {
        "app": "MeetVoice App Compl√®te",
        "version": "3.0",
        "description": "TTS + IA + Description Attractive + WebSocket",
        "endpoints": {
            "tts": "POST /tts",
            "ia": "POST /ia",
            "description": "POST /description",
            "questions": "GET /inscription/question/{numero}",
            "websocket": "WS /ws/chat/{user_id}",
            "feedback": "POST /feedback",
            "stats": "GET /stats"
        },
        "features": [
            "üéµ Text-to-Speech (Edge TTS)",
            "ü§ñ IA Hybride (Gemini + DeepInfra)",
            "üéØ Description Attractive",
            "üìù Questions d'inscription",
            "‚ö° WebSocket temps r√©el",
            "üíæ Base de donn√©es PostgreSQL"
        ]
    }

@app.post("/tts")
async def generate_tts(request: TTSRequest):
    """üéµ G√©n√®re l'audio TTS"""
    try:
        start_time = time.time()

        logger.info(f"üéµ G√©n√©ration TTS: {request.text[:50]}...")

        # G√©n√©rer l'audio
        audio_data = await generer_audio_tts(request.text, request.voice, request.rate, request.pitch)

        if not audio_data:
            raise HTTPException(status_code=500, detail="Erreur g√©n√©ration audio")

        processing_time = time.time() - start_time

        # Enregistrer en base
        try:
            conversation_id = db_service.log_conversation(
                prompt=f"TTS: {request.text}",
                response="Audio g√©n√©r√©",
                provider="edge_tts",
                processing_time=processing_time,
                user_id="tts_user",
                system_prompt="G√©n√©ration TTS",
                fallback_used=False,
                cost=0.0,  # TTS gratuit (Edge)
                voice_settings={"voice": request.voice, "rate": request.rate, "pitch": request.pitch},
                audio_generated=True
            )
        except Exception as db_error:
            logger.warning(f"Erreur BDD TTS: {db_error}")

        # Retourner l'audio en base64
        audio_base64 = base64.b64encode(audio_data).decode('utf-8')

        return {
            "audio": f"data:audio/mp3;base64,{audio_base64}",
            "text": request.text,
            "voice": request.voice,
            "processing_time": processing_time,
            "size": len(audio_data)
        }

    except Exception as e:
        logger.error(f"Erreur TTS: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/vocal")
async def conversation_vocale_streaming(
    audio_file: UploadFile = File(...),
    prenom: str = None,
    voice: str = "Microsoft Server Speech Text to Speech Voice (fr-FR, DeniseNeural)",
    rate: str = "+0%",
    pitch: str = "+0Hz"
):
    """üé§ Conversation vocale pure avec streaming audio

    Upload un fichier audio ‚Üí Transcription ‚Üí IA ‚Üí Streaming audio de la r√©ponse
    Plus rapide et plus naturel que l'endpoint texte classique !
    """
    try:
        start_time = time.time()

        logger.info(f"üé§ Conversation vocale: {audio_file.filename} (prenom: {prenom})")

        # 1. Transcription audio ‚Üí texte
        transcription_start = time.time()
        prompt = await transcrire_audio(audio_file)
        transcription_time = time.time() - transcription_start

        if not prompt or prompt in ["Je n'ai pas pu comprendre l'audio", "Erreur de transcription"]:
            # R√©ponse d'erreur en audio
            error_text = "D√©sol√©e, je n'ai pas bien compris. Peux-tu r√©p√©ter ?"
            return StreamingResponse(
                generer_audio_tts_streaming(error_text, voice, rate, pitch),
                media_type="audio/mp3",
                headers={"X-Error": "transcription_failed"}
            )

        logger.info(f"üé§ Transcrit en {transcription_time:.3f}s: {prompt[:50]}...")

        # 2. Traitement IA
        ia_start = time.time()
        system_prompt = "Tu es Sophie, coach de s√©duction experte et bienveillante."
        ai_result = await call_ai_hybrid(prompt, system_prompt, prenom)
        ia_time = time.time() - ia_start

        logger.info(f"ü§ñ IA r√©pondu en {ia_time:.3f}s: {ai_result['response'][:50]}...")

        # 3. Enregistrer en base (en arri√®re-plan)
        total_time = time.time() - start_time
        try:
            db_service = get_database_service()
            db_service.log_conversation(
                prompt=prompt,
                response=ai_result["response"],
                provider=f"vocal_{ai_result['provider']}",
                processing_time=total_time,
                user_id=prenom or "vocal_user",
                system_prompt=system_prompt,
                fallback_used=ai_result["fallback_used"],
                cost=ai_result["cost"],
                voice_settings={"voice": voice, "rate": rate, "pitch": pitch, "transcription_time": transcription_time},
                audio_generated=True
            )
        except Exception as db_error:
            logger.warning(f"‚ö†Ô∏è Erreur BDD vocal: {db_error}")

        # 4. Streaming de la r√©ponse audio
        logger.info(f"üéµ Streaming audio de la r√©ponse...")

        return StreamingResponse(
            generer_audio_tts_streaming(ai_result["response"], voice, rate, pitch),
            media_type="audio/mp3",
            headers={
                "X-Transcription-Time": str(transcription_time),
                "X-IA-Time": str(ia_time),
                "X-Total-Time": str(total_time),
                "X-Provider": ai_result["provider"],
                "X-Transcription": prompt[:100]  # Pour debug
            }
        )

    except Exception as e:
        logger.error(f"‚ùå Erreur conversation vocale: {e}")
        # R√©ponse d'erreur en audio
        error_text = "D√©sol√©e, il y a eu un probl√®me technique. Peux-tu r√©essayer ?"
        return StreamingResponse(
            generer_audio_tts_streaming(error_text, voice, rate, pitch),
            media_type="audio/mp3",
            headers={"X-Error": str(e)}
        )

@app.post("/ia")
async def chat_ia(request: IARequest):
    """ü§ñ Chat avec l'IA (Gemini + DeepInfra)"""
    try:
        start_time = time.time()

        logger.info(f"ü§ñ Chat IA: {request.prompt[:50]}...")

        # Appeler l'IA hybride avec personnalisation
        ai_result = await call_ai_hybrid(request.prompt, request.system_prompt, request.prenom)

        # G√©n√©rer l'audio si demand√©
        audio_data = None
        if request.include_audio:
            audio_data = await generer_audio_tts(ai_result["response"], request.voice, request.rate, request.pitch)

        total_time = time.time() - start_time

        # Enregistrer en base
        try:
            conversation_id = db_service.log_conversation(
                prompt=request.prompt,
                response=ai_result["response"],
                provider=ai_result["provider"],
                processing_time=total_time,
                user_id=request.user_id,
                system_prompt=request.system_prompt,
                fallback_used=ai_result["fallback_used"],
                cost=ai_result["cost"],
                voice_settings={"voice": request.voice, "rate": request.rate, "pitch": request.pitch},
                audio_generated=request.include_audio
            )
        except Exception as db_error:
            logger.warning(f"Erreur BDD IA: {db_error}")

        # R√©ponse simplifi√©e pour le frontend
        response_data = {
            "response": ai_result["response"]
        }

        if audio_data:
            response_data["audio"] = f"data:audio/mp3;base64,{base64.b64encode(audio_data).decode()}"

        return response_data

    except Exception as e:
        logger.error(f"Erreur IA: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/description")
async def generer_description(personne: DescriptionRequest):
    """üéØ G√©n√®re une description attractive PREMIUM pour profil de rencontre

    Service payant - Toujours la version longue et compl√®te avec :
    - Introduction personnalis√©e
    - Description des passions reformul√©es
    - Motivation claire (pourquoi sur le site)
    - Extension d√©taill√©e selon le type de relation
    - Conclusion engageante
    - Paragraphes structur√©s pour une lecture optimale
    """
    try:
        start_time = time.time()

        logger.info(f"üéØ G√©n√©ration description pour {personne.prenom} (recherche: {personne.recherche})")

        # G√©n√©rer la description
        result = generer_description_attractive(personne)

        processing_time = time.time() - start_time
        # Garder seulement la description pour le frontend
        simplified_result = {"description": result["description"]}

        # Enregistrer en base de donn√©es
        try:
            conversation_id = db_service.log_conversation(
                prompt=f"Description de {personne.prenom}: {personne.physique} | {personne.gouts}",
                response=simplified_result["description"],
                provider="description_generator",
                processing_time=processing_time,
                user_id=personne.user_id,
                system_prompt=f"G√©n√©ration description {personne.recherche}",
                fallback_used=False,
                cost=0.0,  # Description gratuite
                voice_settings={"type": "description", "recherche": personne.recherche},
                audio_generated=False
            )
            # Conversation enregistr√©e mais pas retourn√©e au frontend
            logger.info(f"‚úÖ Description enregistr√©e: conversation_id={conversation_id}")
        except Exception as db_error:
            logger.warning(f"‚ö†Ô∏è Erreur enregistrement BDD: {db_error}")

        return simplified_result

    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©ration description: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/inscription/question/{numero}")
async def get_question_audio(numero: int):
    """üìù R√©cup√®re l'audio d'une question d'inscription"""
    try:
        if not (1 <= numero <= 30):
            raise HTTPException(status_code=400, detail="Num√©ro de question invalide (1-30)")

        # Questions d'inscription pr√©d√©finies
        questions = {
            1: "Bonjour ! Bienvenue dans votre parcours de d√©veloppement personnel. Pouvez-vous me dire votre pr√©nom ?",
            2: "Parfait ! Maintenant, parlez-moi un peu de vous. Que faites-vous dans la vie ?",
            3: "Tr√®s int√©ressant ! Quels sont vos principaux centres d'int√©r√™t et passions ?",
            4: "Excellent ! Dans quels domaines aimeriez-vous progresser en mati√®re de s√©duction ?",
            5: "Merci pour ces informations. Avez-vous d√©j√† eu des exp√©riences en coaching personnel ?"
        }

        if numero not in questions:
            # Question g√©n√©rique pour les num√©ros non d√©finis
            question_text = f"Question {numero} : Pouvez-vous d√©velopper votre r√©ponse pr√©c√©dente ?"
        else:
            question_text = questions[numero]

        # G√©n√©rer l'audio de la question
        audio_data = await generer_audio_tts(
            question_text,
            "Microsoft Server Speech Text to Speech Voice (fr-FR, DeniseNeural)"
        )

        if not audio_data:
            raise HTTPException(status_code=500, detail="Erreur g√©n√©ration audio question")

        # Enregistrer en base
        try:
            db_service.log_conversation(
                prompt=f"Question inscription {numero}",
                response=question_text,
                provider="inscription_questions",
                processing_time=0.5,
                user_id="inscription_system",
                system_prompt="Questions d'inscription",
                fallback_used=False,
                cost=0.0,  # Questions gratuites
                voice_settings={"type": "question", "numero": numero},
                audio_generated=True
            )
        except Exception as db_error:
            logger.warning(f"Erreur BDD question: {db_error}")

        # Retourner l'audio directement
        from fastapi.responses import Response
        return Response(
            content=audio_data,
            media_type="audio/mpeg",
            headers={
                "Content-Disposition": f"inline; filename=question_{numero}.mp3",
                "Cache-Control": "public, max-age=3600"
            }
        )

    except Exception as e:
        logger.error(f"Erreur question {numero}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/inscription/info")
async def get_inscription_info():
    """üìã Informations sur les questions d'inscription"""
    return {
        "total_questions": 30,
        "questions_disponibles": list(range(1, 31)),
        "format_audio": "MP3",
        "voix": "Denise (Fran√ßais)",
        "duree_moyenne": "5-10 secondes par question",
        "endpoint": "/inscription/question/{numero}"
    }

@app.post("/feedback")
async def submit_feedback(feedback: FeedbackRequest):
    """üí¨ Soumettre un feedback sur une conversation"""
    try:
        # Enregistrer le feedback en base
        feedback_id = db_service.log_feedback(
            conversation_id=feedback.conversation_id,
            rating=feedback.rating,
            comment=feedback.comment,
            category=feedback.category,
            improvement_suggestion=feedback.improvement_suggestion,
            user_id=feedback.user_id
        )

        logger.info(f"üìù Feedback enregistr√©: {feedback_id}")

        return {
            "feedback_id": feedback_id,
            "message": "Feedback enregistr√© avec succ√®s",
            "rating": feedback.rating,
            "category": feedback.category
        }

    except Exception as e:
        logger.error(f"Erreur feedback: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/stats")
async def get_stats():
    """üìä Statistiques g√©n√©rales de l'application"""
    try:
        stats = db_service.get_system_stats()

        return {
            "app": "MeetVoice App Compl√®te",
            "version": "3.0",
            "stats": stats,
            "websocket_connections": len(manager.active_connections),
            "features_actives": [
                "TTS Edge",
                "IA Hybride (Gemini + DeepInfra)",
                "Description Attractive",
                "Questions d'inscription",
                "WebSocket temps r√©el",
                "Base de donn√©es PostgreSQL"
            ],
            "endpoints_disponibles": {
                "tts": "POST /tts",
                "ia": "POST /ia",
                "description": "POST /description",
                "questions": "GET /inscription/question/{numero}",
                "websocket": "WS /ws/chat/{user_id}",
                "feedback": "POST /feedback"
            }
        }

    except Exception as e:
        logger.error(f"Erreur stats: {e}")
        return {
            "app": "MeetVoice App Compl√®te",
            "version": "3.0",
            "error": "Erreur r√©cup√©ration statistiques",
            "websocket_connections": len(manager.active_connections)
        }

@app.websocket("/ws/chat/{user_id}")
async def websocket_chat(websocket: WebSocket, user_id: str):
    """‚ö° WebSocket pour chat temps r√©el avec l'IA"""
    await manager.connect(websocket, user_id)

    try:
        while True:
            # Recevoir le message
            data = await websocket.receive_text()
            message_data = json.loads(data)

            prompt = message_data.get("prompt", "")
            system_prompt = message_data.get("system_prompt", "Tu es Sophie, coach de s√©duction experte.")
            include_audio = message_data.get("include_audio", True)
            voice = message_data.get("voice", "Microsoft Server Speech Text to Speech Voice (fr-FR, DeniseNeural)")

            if not prompt:
                continue

            # Indiquer le d√©but du traitement
            await manager.send_message(user_id, {
                "type": "processing_start",
                "message": "Sophie r√©fl√©chit..."
            })

            try:
                # Appeler l'IA
                ai_result = await call_ai_hybrid(prompt, system_prompt)

                # Envoyer la r√©ponse texte
                await manager.send_message(user_id, {
                    "type": "text_response",
                    "content": ai_result["response"],
                    "provider": ai_result["provider"],
                    "fallback_used": ai_result["fallback_used"]
                })

                # G√©n√©rer et envoyer l'audio si demand√©
                if include_audio:
                    await manager.send_message(user_id, {
                        "type": "audio_generation_start",
                        "message": "G√©n√©ration de l'audio..."
                    })

                    audio_data = await generer_audio_tts(ai_result["response"], voice)

                    if audio_data:
                        await manager.send_message(user_id, {
                            "type": "audio_complete",
                            "audio": f"data:audio/mp3;base64,{base64.b64encode(audio_data).decode()}"
                        })

                # Enregistrer en base
                try:
                    conversation_id = db_service.log_conversation(
                        prompt=prompt,
                        response=ai_result["response"],
                        provider=f"websocket_{ai_result['provider']}",
                        processing_time=ai_result["processing_time"],
                        user_id=user_id,
                        system_prompt=system_prompt,
                        fallback_used=ai_result["fallback_used"],
                        cost=ai_result["cost"],
                        voice_settings={"voice": voice, "websocket": True},
                        audio_generated=include_audio
                    )

                    await manager.send_message(user_id, {
                        "type": "conversation_complete",
                        "conversation_id": conversation_id,
                        "total_time": ai_result["processing_time"]
                    })

                except Exception as db_error:
                    logger.warning(f"Erreur BDD WebSocket: {db_error}")

            except Exception as ai_error:
                await manager.send_message(user_id, {
                    "type": "error",
                    "message": f"Erreur IA: {str(ai_error)}"
                })

    except WebSocketDisconnect:
        manager.disconnect(user_id)
    except Exception as e:
        logger.error(f"Erreur WebSocket: {e}")
        manager.disconnect(user_id)

# ================================
# POINT D'ENTR√âE
# ================================

if __name__ == "__main__":
    import uvicorn

    print("üöÄ D√©marrage MeetVoice App Compl√®te")
    print("=" * 50)
    print("üìã Fonctionnalit√©s disponibles :")
    print("   üéµ TTS (Text-to-Speech)")
    print("   ü§ñ IA Hybride (Gemini + DeepInfra)")
    print("   üéØ Description Attractive")
    print("   üìù Questions d'inscription")
    print("   ‚ö° WebSocket temps r√©el")
    print("   üíæ Base de donn√©es PostgreSQL")
    print("=" * 50)
    print("üåê Endpoints principaux :")
    print("   POST /tts")
    print("   POST /ia")
    print("   POST /description")
    print("   GET  /inscription/question/{numero}")
    print("   WS   /ws/chat/{user_id}")
    print("   POST /feedback")
    print("   GET  /stats")
    print("=" * 50)
    print("üîó URL : https://aaaazealmmmma.duckdns.org")
    print("üìö Documentation : https://aaaazealmmmma.duckdns.org/docs")

    uvicorn.run(app, host="0.0.0.0", port=8012)
