#!/usr/bin/env python3
"""
MeetVoice - Application Simple avec 30 Questions d'Inscription
API FastAPI ultra-simple pour les questions d'inscription avec synth√®se vocale
"""

from fastapi import FastAPI, HTTPException
from fastapi.responses import StreamingResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import edge_tts
import asyncio
import os
from groq import Groq
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

# Configuration Groq (ultra-rapide)
groq_api_key = os.getenv("GROQ_API_KEY")
if not groq_api_key:
    raise ValueError("GROQ_API_KEY non trouv√©e dans le fichier .env")
groq_client = Groq(api_key=groq_api_key)

# Mod√®le de donn√©es pour la description
class UserProfile(BaseModel):
    prenom: str
    physique: str

# Application FastAPI
app = FastAPI(title="MeetVoice Questions", version="1.0")

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Les 30 Questions d'Inscription MeetVoice
QUESTIONS = [
    "Bonjour ! Je m'appelle Sophie et je suis ravie de vous accompagner dans votre inscription sur MeetVoice. Commen√ßons par le commencement : quel nom d'utilisateur souhaitez-vous choisir ?.",
    "Parfait ! Maintenant, pouvez-vous me dire votre nom de famille ?",
    "Et votre pr√©nom ? J'aimerais savoir comment vous appeler !",
    "Quelle est votre date de naissance ? Ne vous inqui√©tez pas, ces informations restent confidentielles.",
    "Maintenant, une question importante : comment vous identifiez-vous sexuellement et sentimentalement ?",
    "Quel type de relation recherchez-vous sur MeetVoice ? Plut√¥t amical, amoureux ou libertin ?",
    "Quelle est votre situation sentimentale actuelle ?",
    "Si cela ne vous d√©range pas, quelle est votre taille en centim√®tres ?",
    "Et votre poids en kilogrammes ? Ces informations nous aident √† mieux vous pr√©senter.",
    "Parlons de votre apparence ! Quelle est la couleur de vos yeux ?",
    "Et vos cheveux, de quelle couleur sont-ils ?",
    "Quelle coupe de cheveux avez-vous actuellement ?",
    "Portez-vous des lunettes ou des lentilles ?",
    "Comment d√©crivez-vous votre silhouette ?",
    "Maintenant, parlons de votre vie professionnelle. Choisissez votre profession dans la liste qui s'affiche.",
    "Question d√©licate mais importante : quelle est votre religion ou vos croyances spirituelles ?",
    "Si cela ne vous d√©range pas, j'aimerais en savoir un peu plus sur vos origines culturelles ou ethniques. Cette information nous aide √† mieux comprendre la diversit√© de notre communaut√© MeetVoice.",
    "Maintenant, d√©crivez-vous ! S√©lectionnez vos principaux traits de caract√®re dans la liste.",
    "Impressionnant ! Quelles langues parlez-vous ?",
    "C√¥t√© divertissement, quels genres de films vous passionnent ?",
    "Et niveau musique, qu'est-ce qui fait vibrer vos oreilles ?",
    "Parlez-moi de vos passions ! Quels sont vos hobbies et centres d'int√©r√™t ?",
    "Question style : comment d√©cririez-vous votre fa√ßon de vous habiller ?",
    "Pour les sorties, qu'est-ce qui vous fait plaisir ? Restaurants, cin√©ma, nature ?",
    "Quel est votre niveau d'√©ducation ? Pas de jugement, juste pour mieux vous conna√Ætre !",
    "Avez-vous des enfants ou souhaitez-vous en avoir ?",
    "J'aimerais en savoir un peu plus sur vos habitudes de vie. Fumez-vous ?",
    "D'accord, consommez-vous de l'alcool pendant les sorties ? ",
    "Maintenant, la question que j'adore : parlez-moi de vous ! Qu'est-ce qui vous rend unique et sp√©cial ?",
    "Pour vous proposer des rencontres pr√®s de chez vous, acceptez-vous de partager votre localisation ?",
    "Parfait ! Maintenant, ajoutons une belle photo de vous pour compl√©ter votre profil !",
    "Question l√©gale obligatoire : confirmez-vous √™tre √¢g√© de 18 ans ou plus ?",
    "Derni√®re √©tape : acceptez-vous nos conditions d'utilisation et notre politique de confidentialit√© ?",
    "Fantastique ! Merci d'avoir pris le temps de remplir ce formulaire. Votre inscription est maintenant en cours de traitement et vous devriez bient√¥t pouvoir d√©couvrir MeetVoice !"
]

# Voix fran√ßaise Denise
VOICE = "Microsoft Server Speech Text to Speech Voice (fr-FR, DeniseNeural)"

async def generate_audio(text: str) -> bytes:
    """G√©n√®re l'audio TTS avec Edge TTS"""
    try:
        communicate = edge_tts.Communicate(text, VOICE)
        audio_data = b""
        async for chunk in communicate.stream():
            if chunk["type"] == "audio":
                audio_data += chunk["data"]
        return audio_data
    except Exception as e:
        print(f"Erreur TTS: {e}")
        return b""

@app.get("/")
async def root():
    """Page d'accueil de l'API"""
    return {
        "app": "MeetVoice Questions",
        "version": "1.0",
        "description": "API simple pour les 33 questions d'inscription",
        "total_questions": len(QUESTIONS),
        "endpoints": {
            "info": "GET /info",
            "question_audio": "GET /inscription/question/{numero}",
            "description": "POST /description"
        }
    }

@app.get("/info")
async def get_info():
    """Informations sur les questions"""
    return {
        "total_questions": len(QUESTIONS),
        "questions_disponibles": list(range(1, len(QUESTIONS) + 1)),
        "voix": "Denise (Fran√ßais)",
        "format_audio": "MP3",
        "preview": [f"Q{i+1}: {q[:50]}..." for i, q in enumerate(QUESTIONS[:5])]
    }

@app.get("/inscription/question/{numero}")
async def get_inscription_question_audio(numero: int):
    """R√©cup√®re l'audio d'une question d'inscription"""
    if not (1 <= numero <= len(QUESTIONS)):
        raise HTTPException(status_code=404, detail=f"Question {numero} non trouv√©e. Disponibles: 1-{len(QUESTIONS)}")

    question_text = QUESTIONS[numero - 1]
    audio_data = await generate_audio(question_text)

    if not audio_data:
        raise HTTPException(status_code=500, detail="Erreur g√©n√©ration audio")

    async def audio_stream():
        yield audio_data

    return StreamingResponse(
        audio_stream(),
        media_type="audio/mpeg",
        headers={"Content-Disposition": f"inline; filename=question_{numero}.mp3"}
    )

@app.post("/description")
async def generate_description(profile: UserProfile):
    """G√©n√®re une description attractive pour un site de rencontre"""
    try:
        print(f"üîç Donn√©es re√ßues: prenom={profile.prenom}, physique={profile.physique[:50]}...")

        # Prompt pour Gemini
        prompt = f"""
Tu es un expert en r√©daction de profils pour sites de rencontre.
Cr√©e une description attractive, authentique et vendeuse pour cette personne :

Pr√©nom: {profile.prenom}
Physique: {profile.physique}

Consignes STRICTES:
- EXACTEMENT 1000 caract√®res (ni plus, ni moins)
- Ton s√©duisant, confiant et magn√©tique
- Mets en valeur le charme et l'attractivit√© physique
- √âvoque des passions, des ambitions, du myst√®re
- Utilise des d√©tails concrets et intrigants
- Premi√®re personne avec le pr√©nom
- Sois original, √©vite les phrases banales
- Cr√©e de l'envie et de la curiosit√©
- Mentionne des qualit√©s uniques et des centres d'int√©r√™t captivants

IMPORTANT: Compte pr√©cis√©ment les caract√®res pour atteindre EXACTEMENT 1000.

Retourne uniquement la description, sans commentaires.
"""

        print("üöÄ Appel √† Groq (ultra-rapide)...")

        # Appel √† Groq avec Llama 3.1 8B
        response = groq_client.chat.completions.create(
            model="llama-3.1-8b-instant",  # Mod√®le rapide et disponible
            messages=[
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            temperature=0.7,
            max_tokens=1000,
            top_p=0.8
        )

        print("‚úÖ R√©ponse Groq re√ßue")

        description = response.choices[0].message.content.strip()

        return {
            "success": True,
            "description": description,
            "prompt_used": prompt,
            "prenom": profile.prenom
        }

    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        print(f"‚ùå Type d'erreur: {type(e).__name__}")
        raise HTTPException(status_code=500, detail=f"Erreur g√©n√©ration description: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    print("üéµ MeetVoice Questions - D√©marrage")
    print(f"üìù {len(QUESTIONS)} questions d'inscription disponibles")
    print("üåê Serveur: http://localhost:8001")
    print("üìö Documentation: http://localhost:8001/docs")
    uvicorn.run(app, host="0.0.0.0", port=8001)
